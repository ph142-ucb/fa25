library(shiny); runApp('app-fa23.R')
runApp('app-fa23.R')
runApp('app-fa23.R')
library(shiny); runApp('app-fa23.R')
runApp('app-fa23.R')
runApp('app-fa23.R')
runApp('app-fa23.R')
runApp('app-fa23.R')
library(survival)
library(multcomp)
library(lmtest)
library(broom)
### Recode a few variables:
lung2 <- lung                      # lung dataset from survival package
lung2$status <- lung2$status-1     # death=1, censored=0
lung2$female <- lung2$sex-1
lung2$karno.cat <- cut(lung2$ph.karno, 3)
# Create indicator variables for Karnofsky status:
lung2$karno.cat2 <- as.integer(lung2$karno.cat) # Make an integer
na.karno <- is.na(lung2$karno.cat) # Find where missing values are
# Create indicator variables
lung2$karno.1 <- ifelse(lung2$karno.cat2 ==1, 1, 0)
lung2$karno.2 <- ifelse(lung2$karno.cat2 ==2, 1, 0)
lung2$karno.3 <- ifelse(lung2$karno.cat2 ==3, 1, 0)
# Make sure indicators have missing values where original variable did:
lung2$karno.1[na.karno] <-
lung2$karno.2[na.karno] <- lung2$karno.3[na.karno] <- NA
#### Standard Cox model
coxph.lung.adj <- coxph(Surv(time, status)~karno.2 + karno.3 +
age + female,
data=lung2, ties="efron")
tidy(coxph.lung.adj, exponentiate = TRUE, conf.int=TRUE)
#### Stratified Cox model (on biological sex)
cox.strat.lung <- coxph(Surv(time, status) ~ karno.2 + karno.3 + age
+ strata(female),
data=lung2, method="efron")
tidy(cox.strat.lung, exponentiate=TRUE, conf.int=TRUE)
sf.lung.unadj <- survfit(Surv(time, status)~karno.cat, data=lung2)
plot(sf.lung.unadj, main="log(-log(S(t))) by baseline Karnofsky score",
xlab="Time", ylab="log(-log(S(t)))",
fun=cloglog <- function(x) log(-log(x)), # function of S(t)
log="x",                                 # Log the time axis
bty="l", col=c("darkblue","darkorange","red"))
legend("bottomright",legend=c("Karnofsky (50,66.7]",
"Karnofsky (66.7, 83.3]",
"Karnofsky (83.3,100]"),
col=c("darkblue","darkorange","red"),
cex=0.8, lty=1, lwd=2, bty="l")
cox.timeixn.lung <- coxph(Surv(time, status) ~ karno.2 + karno.3 + age +
female +
tt(karno.2) + tt(karno.3) + tt(age) +
tt(female),
data=lung2, method="efron",
tt=function(x,t,...) x*t)
tidy(cox.timeixn.lung, exponentiate=TRUE, conf.int=TRUE)
# Global test of interaction (all time interaction terms = 0
# vs. any non-zero):
lrt <- -2*(logLik(coxph.lung.adj) - logLik(cox.timeixn.lung))
df <- attr(logLik(cox.timeixn.lung),"df") -
attr(logLik(coxph.lung.adj),"df")
pchisq(lrt, df, lower.tail=FALSE) # p-value LRT
#### Interactions Karnofsky status with linear time:
cox.timeixn.strat.lung <- coxph(Surv(time, status) ~ karno.2 + karno.3 +
age +
tt(karno.2) +
tt(karno.3) +
strata(female),
data=lung2, method="efron",
tt=function(x,t,...) x*t)
summary(cox.timeixn.strat.lung)
tidy(cox.timeixn.strat.lung)
k.30 <- matrix(c(0,1,0,0,30), nrow=1) # Calc log-HR @ 30 days
ln.hr.high.30 <- glht(cox.timeixn.strat.lung, linfct=k.30)
k.60 <- matrix(c(0,1,0,0,60), nrow=1) # Calc log-HR @ 60 days
ln.hr.high.60 <- glht(cox.timeixn.strat.lung, linfct=k.60)
k.90 <- matrix(c(0,1,0,0,90), nrow=1) # Calc log-HR @ 90 days
ln.hr.high.90 <- glht(cox.timeixn.strat.lung, linfct=k.90)
rbind(confint(ln.hr.high.30)$confint[,1:3],
confint(ln.hr.high.60)$confint[,1:3],
confint(ln.hr.high.90)$confint[,1:3]
) |> exp() |> round(x=_,digits=3)
round(exp(
rbind(confint(ln.hr.high.30)$confint[,1:3],
confint(ln.hr.high.60)$confint[,1:3],
confint(ln.hr.high.90)$confint[,1:3]
))
,2)
#### Interactions of Karnofsky status with categorized time (cut at 1 year):
cox.timeixn.strat.lung.1yr <- coxph(Surv(time, status) ~ karno.2 +
karno.3 + age +
tt(karno.2) +
tt(karno.3) +
strata(female),
data=lung2, method="efron",
tt=function(x,t,...) x*as.integer(t>365.25))
k.1yr <- matrix(c(0,1,0,0,0,
0,1,0,0,1), nrow=2, byrow=TRUE)
rownames(k.1yr) <- c("<=1 year",">1 year")
confint(glht(cox.timeixn.strat.lung.1yr,
linfct=k.1yr))$confint[,1:3] |> exp() |> round(x=_, digits=2)
#### Example with time-varying covariates (e.g. transplant status):
head(jasa1)
# Note use of (start, stop) times since multiple observations per individual:
tvc.cox.stanford <- coxph(Surv(start, stop, event)~ transplant + age +
surgery, data=jasa1, ties='efron')
tidy(tvc.cox.stanford, exponentiate=TRUE, conf.int = TRUE)
knitr::opts_chunk$set(
echo = T,
eval = T,
fig.pos = "center",
fig.height = 2.75,
fig.width = 4
)
library(tidyverse)
data(heart, package="survival")
head(stanford2)
# Instead of censoring, indicate event
# Cox PH model
library(survival)
# Weibull AFT model
# Get adjusted HRs from Weibull AFT model
library(SurvRegCensCov)
install.packages('SurvRegCensCov')
knitr::opts_chunk$set(
echo = T,
eval = T,
fig.pos = "center",
fig.height = 2.75,
fig.width = 4
)
library(tidyverse)
data(heart, package="survival")
head(stanford2)
# Instead of censoring, indicate event
# Cox PH model
library(survival)
# Weibull AFT model
# Get adjusted HRs from Weibull AFT model
library(SurvRegCensCov)
# Assess proportional time assumption
library(flextable) #need LuaLaTeX or XeTeX
tab.header <- data.frame(
col_keys = paste0("V", 1:7),
line_1 = c("T5", rep("Adjusted hazard ratio estimates (95% CI)", 6)),
line_2 = c("T5", rep("Cox PH", 2), rep("Weibull PH", 2), rep("Weibull AFT", 2))
)
data.frame(
V1 = vector('character', 3), # T5 categories
V2 = vector('character', 3),  # HR from Cox model
V3 = vector('character', 3),  # (95% CI)
V4 = c("--", "", ""),  # HR from Weibull AFT model
V5 = c("--", "", ""),  # (95% CI)
V6 = c("--", "", ""),  # TR from Weibull AFT model
V7 = c("--", "", "")  # (95% CI)
) |> flextable() |>
set_header_df(tab.header, key = "col_keys") |>
merge_h(part = "header", i = 1:2) |>
merge_v(part = "header", j = c(1)) |>
align(i = 1:3, j = seq(2, 5, 2), align = "right", part = "body") |>
align(i = 1:3, j = 2:5, align = "center", part = "body") |>
align(i = 1:2, j = 2:5, align = "center", part = "header") |>
width(j = c(1, seq(2, 5, 2)), width = c(0.8, rep(0.6, 2))) |>
width(j = seq(3, 5, 2), width = rep(1.2, 2)) |>
vline(j = c(1, 3), border = fp_border_default(color = "black", width = 1 / .pt)) |>
hline(i = 1, part = "header", border = fp_border_default(color = "black", width = 1 / .pt)) |>
hline_top(part = "header", border = fp_border_default(color = "black", width = 1 / .pt)) |>
hline_top(part = "body", border = fp_border_default(color = "black", width = 1 / .pt)) |>
hline_bottom(part = "body", border = fp_border_default(color = "black", width = 1 / .pt))
